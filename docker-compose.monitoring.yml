services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: aqua-watch-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: aquawatch
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-aquawatch123}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - aqua-watch-network

  # Main ML Application
  aqua-watch-ml:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: aqua-watch-ml-app
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      # Supabase Configuration
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      
      # RabbitMQ Configuration
      RABBITMQ_URL: amqp://aquawatch:${RABBITMQ_PASSWORD:-aquawatch123}@rabbitmq:5672/
      
      # Application Configuration
      ENVIRONMENT: production
      PYTHONUNBUFFERED: 1
      
    volumes:
      # Persist model files
      - model_data:/app/models/saved_models
      # Persist logs
      - log_data:/app/logs
      # Persist cache data
      - cache_data:/app/data/cache
      
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    networks:
      - aqua-watch-network
    
    # Health check to ensure the application is running
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/logs/aquarium_ml.log') else 1)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Redis for caching (if needed for performance)
  redis:
    image: redis:7-alpine
    container_name: aqua-watch-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - aqua-watch-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: aqua-watch-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aqua-watch-network

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: aqua-watch-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aqua-watch-network
    depends_on:
      - prometheus

volumes:
  rabbitmq_data:
    driver: local
  model_data:
    driver: local
  log_data:
    driver: local
  cache_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aqua-watch-network:
    driver: bridge
